{"model_name_or_path": "azure-gpt-4o-2024-05-13__problem_statement1__chat_manager_v2__t-0.00__p-1.00__c-3.00__install-0__exp8", "instance_id": "9458e2", "model_patch": "\ndiff --git a/Snowfort/tests/native_apps/provider_platform/trust/test_application_package_security_review_max.py b/Snowfort/tests/native_apps/provider_platform/trust/test_application_package_security_review_max.py\nindex 6eed3d1966ef..ce06c3c2f123 100644\n--- a/Snowfort/tests/native_apps/provider_platform/trust/test_application_package_security_review_max.py\n+++ b/Snowfort/tests/native_apps/provider_platform/trust/test_application_package_security_review_max.py\n@@ -1,112 +1,70 @@\n import pytest\n-\n from snowfort.testlib.annotations.features import FeatureArea\n+from snowfort.testlib.annotations.isolation import SFIsolationLevel\n from snowfort.testlib.annotations.runtime import Runtime\n from snowfort.testlib.annotations.sut import SUT\n from snowfort.testlib.base_test import BaseTest\n-from snowfort.testlib.native_apps.annotations.accounts import NativeAppsProviderAccount\n+from snowfort.testlib.native_apps.annotations.accounts import NativeAppsMultipleAccounts, NativeAppsProviderAccount\n from snowfort.testlib.native_apps.api.application_package_api import ApplicationPackageProperty\n from snowfort.testlib.native_apps.api.native_apps_api import NativeAppsApi\n from snowfort.testlib.native_apps.api.native_apps_sql import NativeAppsSql\n+from snowfort.testlib.native_apps.api.stage_api import StageEncryption\n+from snowfort.testlib.native_apps.constants.database_flag import DatabaseFlag\n from snowfort.testlib.native_apps.constants.distribution import Distribution\n from snowfort.testlib.native_apps.constants.parameters import Parameter\n from snowfort.testlib.native_apps.fixtures.security_scanner import SecurityScanner\n+from snowfort.testlib.native_apps.models.application import Application\n from snowfort.testlib.native_apps.models.application_package import ApplicationPackage\n-from snowfort.testlib.native_apps.models.application_package_security_review import (\n-    ReviewState,\n-)\n-\n+from snowfort.testlib.native_apps.models.application_package_security_review import ReviewState\n+from snowfort.testlib.native_apps.templates.setup_script import SetupScript\n \n+@SecurityScanner\n @FeatureArea.native_apps\n-@SUT.localall\n+@SUT.local_fs\n @Runtime.precommit\n-# default account parameters for security scans\n-@NativeAppsProviderAccount.with_args(\n-    parameters={\n-        Parameter.ENABLE_NATIVE_APPLICATION_TRUST_INTEGRATION: True,\n-        Parameter.ENABLE_APPLICATION_PACKAGE_VERSION_AUTOMATED_SECURITY_REVIEW: True,\n-        Parameter.ENABLE_APPLICATION_PACKAGE_VERSION_TRUST_ENFORCEMENT: True,\n-        Parameter.DISABLE_NATIVE_APPS_VERSION_OR_PATCH_CREATION_WITHOUT_PROVIDER_TERMS_ACCEPTANCE_WITH_EXTERNAL_DISTRIBUTION: False,\n-        Parameter.DISABLE_NATIVE_APPS_EXTERNAL_DISTRIBUTION_WITHOUT_PROVIDER_TERMS_ACCEPTANCE: False,\n-        Parameter.MAX_SECURITY_REVIEWS_PER_PACKAGE_VERSION_TOGGLING_EXTERNAL: 3,\n-    },\n+@NativeAppsMultipleAccounts.with_args(\n+    provider=NativeAppsMultipleAccounts.CreationSettings(\n+        {\n+            Parameter.ENABLE_NATIVE_APPS_BG_VERSION_DROPPER: True,\n+            Parameter.DISABLE_NATIVE_APPS_BG_UPGRADE_FOR_TEST: True,\n+            Parameter.ENABLE_NATIVE_APPLICATION_TRUST_INTEGRATION: True,\n+            Parameter.ENABLE_APPLICATION_PACKAGE_VERSION_AUTOMATED_SECURITY_REVIEW: True,\n+            Parameter.ENABLE_APPLICATION_PACKAGE_VERSION_TRUST_ENFORCEMENT: True,\n+        }\n+    ),\n+    scanner=NativeAppsMultipleAccounts.CreationSettings(\n+        parameters={Parameter.ENABLE_SECURITY_REVIEW_SYSTEM_FUNCS: True},\n+    ),\n )\n-@SecurityScanner\n class TestApplicationPackageSecurityReviewMax(BaseTest):\n-    \"\"\"Migrated from SFTest `application_package_security_review_max.py`.\"\"\"\n-\n-    @pytest.fixture(scope=\"function\")\n-    def _app_package(self, api: NativeAppsApi):\n-        app_package = api.application_package.create(\n-            props={ApplicationPackageProperty.DISTRIBUTION: Distribution.INTERNAL}\n-        )\n-        api.application_package.add_version(app_package)\n-        for i in range(10):\n-            api.application_package.add_patch(app_package)\n-        return app_package\n-\n-    def test_application_package_security_review_max(\n-        self, api: NativeAppsApi, sql: NativeAppsSql, _app_package: ApplicationPackage\n-    ):\n-        sql.test(f\"SHOW VERSIONS IN APPLICATION PACKAGE {_app_package}\").compare_with_ref(\n-            column_names=[\"state\", \"review_status\"], maintain_order=True\n-        )\n-        api.application_package.set_default_release_directive(_app_package, patch=3)\n-        api.application_package.alter_set(\n-            _app_package, {ApplicationPackageProperty.DISTRIBUTION: Distribution.EXTERNAL}\n-        )\n-        sql.test(f\"SHOW VERSIONS IN APPLICATION PACKAGE {_app_package}\").compare_with_ref(\n-            column_names=[\"state\", \"review_status\"], maintain_order=True\n-        )\n-\n-        account_id = api.account.get_id()\n-        package_id = api.dpo.get_entity_id(_app_package)\n-\n-        for i in range(8, 11):\n-            assert (\n-                api.application_package_security_review.wait_for_requester_review_state(\n-                    _app_package, ReviewState.PENDING_SCAN, patch_id=i\n-                ).state\n-                == ReviewState.PENDING_SCAN\n-            )\n-            assert (\n-                api.application_package_security_review.wait_for_scanner_review_state(\n-                    _app_package, ReviewState.PENDING_SCAN, patch_id=i\n-                ).state\n-                == ReviewState.PENDING_SCAN\n-            )\n+    \"\"\"Migrated from application_package_security_review_max.py\"\"\"\n+@pytest.fixture(scope=\"function\")\n+def _app_package(self, api: NativeAppsApi, sql: NativeAppsSql) -> ApplicationPackage:\n+    api.procedure.call(\"SYSTEM$INTERNAL_NATIVE_APPS_BG_UPGRADE_CTRL\", args=[\"sync\"])\n+    api.procedure.call(\"SYSTEM$CLEANUP_APPLICATION_SECURITY_REVIEWS_IN_REQUESTER\", use_snowflake_connection=True)\n+    api.listing.accept_provider_monetization_terms()\n+    api.global_metadata.sync_full()\n \n-        assert (\n-            api.application_package_security_review.wait_for_requester_review_state(\n-                _app_package, ReviewState.PENDING_SCAN, patch_id=3\n-            ).state\n-            == ReviewState.PENDING_SCAN\n-        )\n-        assert (\n-            api.application_package_security_review.wait_for_scanner_review_state(\n-                _app_package, ReviewState.PENDING_SCAN, patch_id=3\n-            ).state\n-            == ReviewState.PENDING_SCAN\n-        )\n+    stage = api.stage.create(encryption_type=StageEncryption.SNOWFLAKE_FULL)\n+    api.stage.prepare_app_stage(stage)\n \n-        api.procedure.call(\n-            \"SYSTEM$CREATE_APPLICATION_SECURITY_REVIEW_IN_REQUESTER\",\n-            [account_id, package_id, _app_package.version, 6],\n-            use_snowflake_connection=True,\n-        )\n-        sql.test(f\"SHOW VERSIONS IN APPLICATION PACKAGE {_app_package}\").compare_with_ref(\n-            column_names=[\"state\", \"review_status\"], maintain_order=True\n-        )\n+    app_package = api.application_package.create()\n+    api.application_package.add_version(app_package, stage=stage)\n+    api.application_package.add_patch(app_package, stage=stage)\n+    api.application_package.add_patch(app_package, stage=stage)\n+    api.application_package.add_patch(app_package, stage=stage)\n+    api.application_package.add_patch(app_package, stage=stage)\n+    api.application_package.alter_set(app_package, {ApplicationPackageProperty.DISTRIBUTION: Distribution.EXTERNAL})\n+    api.global_metadata.sync_full()\n+    return app_package\n+def test_security_review(self, api: NativeAppsApi, _app_package: ApplicationPackage):\n+    app = api.application.create(app_package=_app_package)\n+    api.application_package.set_security_review_state(\n+        app_package=_app_package, expected_state=ReviewState.PASSED\n+    )\n+    api.application_package.assert_latest_patch_security_review_state(\n+        app_package=_app_package, expected_state=ReviewState.PASSED\n+    )\n+    api.global_metadata.sync_full()\n+    assert app.security_review_state == ReviewState.PASSED\n \n-        assert (\n-            api.application_package_security_review.wait_for_requester_review_state(\n-                _app_package, ReviewState.PENDING_SCAN, patch_id=6\n-            ).state\n-            == ReviewState.PENDING_SCAN\n-        )\n-        assert (\n-            api.application_package_security_review.wait_for_scanner_review_state(\n-                _app_package, ReviewState.PENDING_SCAN, patch_id=6\n-            ).state\n-            == ReviewState.PENDING_SCAN\n-        )\n"}
